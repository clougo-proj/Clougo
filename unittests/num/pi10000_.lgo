TO AXLOOP
  IF WZERO :T [THROW "THELOOP]
  MAKE "T WDIVIDE :T :MSQUARED
  MAKE "SIGN (- :SIGN)
  MAKE "SUM SIGNADD :SIGN :SUM WDIVIDE :T :J
  MAKE "J :J + 2
END
TO AXX :M :D
  MAKE "T WDIVIDE :ONE :M
  MAKE "SIGN 1
  MAKE "SUM :T
  MAKE "MSQUARED :M * :M
  MAKE "J 3
  CATCH "THELOOP [REPEAT (:D + 5) [AXLOOP]]
  OUTPUT :SUM
END
TO PI1000_ :D
  LOCAL "P
  LOCAL "ANS
  (LOCAL "T0_ "T1_)
  MAKE "T0_ TIMEMILLI
  MAKE "P 1 + ROUND (:D / 3) + LOG10 (384 * :D) / LOG10 1000
  MAKE "ONE [1]
  REPEAT :P [MAKE "ONE LPUT 0 :ONE]
  MAKE "ANS WSUBTRACT (WMULT 16 (AXX 5 :D)) (WMULT 4 (AXX 239 :D))
  MAKE "T1_ TIMEMILLI
  PRINTIT :ANS :D
  (PRINT (:T1_-:T0_)/1000 "ç§’)
END
TO PRINTIT :X :D
  (TYPE FIRST :X ".)
  WPRINTIT BF :X :D
  (PRINT ")
END
TO PRINTTHREE :X
  (LOCAL "D1 "D2 "D3)
  MAKE "D3 REMAINDER :X 10
  MAKE "X (:X - :D3) / 10
  MAKE "D2 REMAINDER :X 10
  MAKE "D1 (:X - :D2) / 10
  TYPE (WORD :D1 :D2 :D3)
END
TO SECOND :A
  OP FIRST BF :A
END
TO SIGNADD :SIGN :X1 :X2
  IF :SIGN > 0 [OP WADD :X1 :X2 STOP]
  OP WSUBTRACT :X1 :X2
END
TO WADD :X1 :X2
  LOCAL "TEMP
  MAKE "TEMP WADDCARRY :X1 :X2
  OP FPUT (((FIRST :TEMP) * 1000) + (SECOND :TEMP)) (BF BF :TEMP)
END
TO WADDCARRY :X1 :X2
  (LOCAL "TEMP "TOP "RMDR)
  IF EMPTYP :X1 [OP [0] STOP]
  MAKE "TEMP WADDCARRY BF :X1 BF :X2
  MAKE "TOP ((FIRST :X1) + (FIRST :X2) + (FIRST :TEMP))
  MAKE "RMDR REMAINDER :TOP 1000
  OP FPUT ((:TOP - :RMDR) / 1000) FPUT :RMDR (BF :TEMP)
END
TO WDIVIDE :X :N
  OP WDIVIDEX :X :N 0
END
TO WDIVIDEX :X :DIVISOR :BRING
  LOCAL "DIVIDEND
  LOCAL "C
  IF EMPTYP :X [OP [] STOP]
  MAKE "DIVIDEND (:BRING * 1000) + FIRST :X
  MAKE "C REMAINDER :DIVIDEND :DIVISOR
  OP FPUT ((:DIVIDEND - :C) / :DIVISOR) WDIVIDEX BF :X :DIVISOR :C
END
TO WMULT :N :X
  LOCAL "TEMP
  MAKE "TEMP WMULTCARRY :N BF :X
  OP FPUT ((:N * (FIRST :X)) + (FIRST :TEMP)) BF :TEMP
END
TO WMULTCARRY :N :X
  (LOCAL "TEMP "TOP "CAR "DIGIT)
  IF EMPTYP :X [OP [0] STOP]
  MAKE "TEMP WMULTCARRY :N BF :X
  MAKE "TOP (:N * (FIRST :X)) + (FIRST :TEMP)
  MAKE "DIGIT REMAINDER :TOP 1000
  MAKE "CAR (:TOP - :DIGIT) / 1000
  OP FPUT :CAR FPUT :DIGIT BF :TEMP
END
TO WPRINTIT :X :D
  IF :D < 0 [STOP]
  IF EMPTYP :X [STOP]
  PRINTTHREE FIRST :X
  WPRINTIT BF :X (:D - 3)
END
TO WSUBBORROW :X1 :X2
  (LOCAL "TEMP "TOP "DIGIT "BOR)
  IF EMPTYP :X1 [OP [0] STOP]
  MAKE "TEMP WSUBBORROW BF :X1 BF :X2
  MAKE "TOP ((FIRST :X1) - (FIRST :X2) + (FIRST :TEMP))
  IF :TOP > (-1) [OP FPUT 0 FPUT :TOP BF :TEMP STOP]
  MAKE "DIGIT (- ((REMAINDER (- :TOP) 1000) - 1000))
  MAKE "BOR ((:TOP - :DIGIT) / 1000)
  OP FPUT :BOR FPUT (:TOP - (:BOR * 1000)) (BF :TEMP)
END
TO WSUBTRACT :X1 :X2
  LOCAL "TEMP
  MAKE "TEMP WSUBBORROW :X1 :X2
  OP FPUT (((FIRST :TEMP) * 1000) + (SECOND :TEMP)) (BF BF :TEMP)
END
TO WZERO :X
  IF EMPTYP :X [OP "TRUE STOP]
  IF (FIRST :X) > 0 [OP "FALSE STOP]
  OP WZERO BF :X
END
