; literal in default value
.defmacro "f1 [[[x "hello]] [
    output (list "pr word "" :x)]]

pr "test:f1
(f1)
(f1 "yes)

; expression in optional input's default value
.defmacro "f2 [[[x (first :y)]] [
    output (list "pr word "" :x)]]

make "y [abc 2]
pr "\ntest:f2
(f2)
(f2 "yes)

; default input count
.defmacro "f3 [[[x] 2] [
    output (list "show :x)]]

pr "\ntest:f3
(f3 1 2)
(f3 1 2 3)
(f3 1 2 3 4)
(f3 1 2 3 4 5)

; having both required and optional inputs; reference to global variable :z
.defmacro "f4 [[y [x word (first :y) :z]] [
    output (list "pr word "" :x)]]

make "y [abc 2]
make "z "ghi
pr "\ntest:f4
(f4 [def 2])
(f4 "yes)

; having required input, optional input, rest input, and default input count
.defmacro "f5 [[y [z :y-1] [x] 1] [
    output (list "pr (list "y= :y ", "z= :z ", "x= :x))]]

pr "\ntest:f5
(f5 1)
(f5 1 2)
(f5 1 2 3)
(f5 1 2 3 4)
(f5 1 2 3 4 5)

; :y passed in as a input shadows the global :y
.defmacro "f6 [[y [x (g)]][output []]]
.defmacro "g [[] [output (list "pr word "" :y)]]

make "y 1
pr "\ntest:f6
(f6 2)
